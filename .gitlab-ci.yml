variables:
  RELEASE_BRANCH: 'release-0.7'
  PROJECT_SSH: "git@github.lan:${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git"
  REMOTE_SSH:  "git@github.com:mambaru/${CI_PROJECT_NAME}.git"

# master
# release-0.7
# pre-release
# devel
# wip-devel

before_script:
  - git submodule deinit --force .
  - git submodule sync
  - git submodule update --init

stages:
  - pre-build
  - build
  - check
  - merge
  - publish
  - clean
  
update-submodules:
  stage: pre-build
  script:
    - git submodule foreach git pull origin master
    - git add .
    - if git commit -am "night build all submodules update autocommit"; then
    -   echo "Submodules Update Succeed!!"
    - fi
  only:
    - night-build

main-build:
  stage: build
  script:
    - ./.ci/build-and-test.sh g++ 11 Release
  only:
    - master
    - devel
    - wip-devel
    - pre-release
    - tags
    - /^build.*$/
    - /^devel-.*$/
    - /^release-.*$/
    - /^hotfix-.*$/
    - night-build

build-g++11:
  stage: build
  script:
    - ./.ci/build-and-test.sh g++ 11 Debug
  only:
    - tags
    - /^build.*$/
    - pre-release
    - night-build

build-g++14:
  stage: build
  script:
    - ./.ci/build-and-test.sh g++ 14 Release
    - ./.ci/build-and-test.sh g++ 14 Debug
  only:
    - tags
    - /^build.*$/
    - pre-release
    - night-build

build-clang++11:
  stage: build
  script:
    - ./.ci/build-and-test.sh clang++ 11 Release
    - ./.ci/build-and-test.sh clang++ 11 Debug
  only:
    - tags
    - /^build.*$/
    - pre-release
    - night-build

build-clang++14:
  stage: build
  script:
    - ./.ci/build-and-test.sh clang++ 14 Release
    - ./.ci/build-and-test.sh clang++ 14 Debug
  only:
    - tags
    - /^build.*$/
    - pre-release
    - night-build

#
# ###########################################
# 

cppcheck:
  stage: check
  script:
    - ./.ci/cppcheck-ci.sh --std=c++11
    - ./.ci/cppcheck-ci.sh --std=c++14
  only:
    - tags
    - /^check.*$/
    - pre-release
    - night-build
    
#
# ###########################################
# 

devel-wip:
  stage: merge
  script:
    - HOST=${CI_PROJECT_URL}  
    - CI_PROJECT_ID=${CI_PROJECT_ID} 
    - GITLAB_USER_ID=${GITLAB_USER_ID} 
    - PRIVATE_TOKEN=${PRIVATE_TOKEN} 
    - ./.ci/automr.sh devel false
  only:
    - wip-devel
    - night-build


devel-any:
  stage: merge
  script:
    - HOST=${CI_PROJECT_URL}  
    - CI_PROJECT_ID=${CI_PROJECT_ID} 
    - GITLAB_USER_ID=${GITLAB_USER_ID} 
    - PRIVATE_TOKEN=${PRIVATE_TOKEN} 
    - ./.ci/automr.sh devel true
  only:
    - /^devel-.*$/
    
pre-release:
  stage: merge
  script:
    - git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:pre-release
  only:
    - devel

master-release:
  stage: merge
  script:
    - HOST=${CI_PROJECT_URL} 
    - CI_PROJECT_ID=${CI_PROJECT_ID} 
    - GITLAB_USER_ID=${GITLAB_USER_ID} 
    - PRIVATE_TOKEN=${PRIVATE_TOKEN} 
    - ./.ci/automr.sh master false
  only:
    - pre-release

master-hotfix:
  stage: merge
  script:
    - HOST=${CI_PROJECT_URL}  
    - CI_PROJECT_ID=${CI_PROJECT_ID} 
    - GITLAB_USER_ID=${GITLAB_USER_ID} 
    - PRIVATE_TOKEN=${PRIVATE_TOKEN} 
    - ./.ci/automr.sh master true
  only:
    - /^hotfix-.*$/

release:
  stage: merge
  script:
    - git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:${RELEASE_BRANCH}
  only:
    - master

delete-branches:
  stage: clean
  script:
    - git push ${PROJECT_SSH} :${CI_COMMIT_REF_NAME}
  only:
    - /^build.*$/
    - /^check.*$/
    
push-to-github:
  stage: publish
  only:
    - master
  script:
    - git branch -f mambaru
    - git checkout mambaru
    - git submodule deinit -f .
    - rm -rf .git/modules
    - git rm -rf external 
    - git submodule add --force https://github.com/mambaru/cmake-ci.git external/cmake-ci
    - git commit -m "autocommit github.com export"
    - git push -f ${REMOTE_SSH} mambaru
    - git push -f --tags ${REMOTE_SSH} mambaru
    - doxygen
    - cd docs/html
    - git init 
    - git add .
    - git commit -m "doxygen"
    - git push -f ${REMOTE_SSH} master:gh-pages
